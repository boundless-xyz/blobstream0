{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "contract IRiscZeroVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_trustedHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_trustedHeight",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_imageId",
          "type": "bytes32"
        }
      ],
      "name": "adminSetImageId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_trustedHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_trustedHeight",
          "type": "uint64"
        }
      ],
      "name": "adminSetTrustedState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRiscZeroVerifier",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "adminSetVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imageId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestHeight",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proofNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_commitBytes",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_seal",
          "type": "bytes"
        }
      ],
      "name": "updateRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IRiscZeroVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proofNonce",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "dataRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct DataRootTuple",
          "name": "_tuple",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "sideNodes",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "key",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numLeaves",
              "type": "uint256"
            }
          ],
          "internalType": "struct BinaryMerkleProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "verifyAttestation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proofNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "startBlock",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "endBlock",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dataCommitment",
          "type": "bytes32"
        }
      ],
      "name": "DataCommitmentStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "blockNumber",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "headerHash",
          "type": "bytes32"
        }
      ],
      "name": "HeadUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "InvalidTargetHeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTrustedHeaderHash",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    }
  ],
  "bytecode": {
    "linkReferences": {},
    "object": "0x608034610130576001600160401b03601f610f7c38819003918201601f191684019183831185841017610135578085926080946040528339810103126101305781516001600160a01b039290838116908190036101305760208201519084821680920361013057606060408401519301519384168094036101305780156101175760018060a01b031990816001541660015560005495818388161760005560405196167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a37f6a4fc32c0f294d805c6e97a6a973775c567bdc586ec19a4c6026edc6f7a19f0c600355600254161760025560065560018060401b031960055416176005556001600455610e30908161014c8239f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040908082526004908136101561001757600080fd5b600092833560e01c9182631f3302a91461069d5750816323a4608b146106555781632b7ac3f31461062c5781636c4f6ba91461060d578163715018a6146105a557816379ba5097146105235781638da5cb5b146104fb578163a7e47629146104d9578163c532514b14610215578163ce0bb7e4146101f6578163e30c3978146101cd578163e405bbc3146101a4578163e6679c261461015b578163ef3f7dd51461013c575063f2fde38b146100cb57600080fd5b3461013857602036600319011261013857356001600160a01b0381811691829003610134576100f8610a4f565b600180546001600160a01b031916831790558254167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b8280fd5b5080fd5b8390346101385781600319360112610138576020906003549051908152f35b50503461013857602036600319011261013857356001600160a01b0381169081900361013857610189610a4f565b6bffffffffffffffffffffffff60a01b600254161760025580f35b83903461013857816003193601126101385760209067ffffffffffffffff600554169051908152f35b83903461013857816003193601126101385760015490516001600160a01b039091168152602090f35b9190503461013457826003193601126101345760209250549051908152f35b90503461013457806003193601126101345767ffffffffffffffff90823582811161047d576102479036908501610821565b602493919335908282116104d5576080610265869336908901610821565b969092810103126104d55783519060808201828110858211176104c25785528235825260209384840135818116978882036104be57868501918252878501938887013585526060808701970135875260055495848716809b11156104ae5780516006540361049e578951905189820152848451168a82015285516060820152875160808201526080815260a08101908082108683111761048b57908d9291818c528a8460018060a01b03600254169360035493609f199061032683826108c3565b03019060025afa1561048157835190823b1561047d578e866060938f9360849451998a988997889663ab750e7560e01b885287015281606487015286860137838301850189905260248401526044830152601f01601f191681010301915afa80156104735761042d575b50927f292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d92879260079796958b54809b83835116907f34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb8b8b51948a51908152a45116908167ffffffffffffffff198416176005555190816006558b8451931617825285820152a1519386525283205561042881546108ee565b905580f35b82819b929b11610460578752987f292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d610390565b634e487b7160e01b825260418a52602482fd5b88513d8d823e3d90fd5b8480fd5b8b513d85823e3d90fd5b634e487b7160e01b8e5260418d5260248efd5b89516352c6046360e01b81528c90fd5b895163145ce5ff60e11b81528c90fd5b8a80fd5b634e487b7160e01b895260418852602489fd5b8680fd5b505034610138576020366003190112610138576104f4610a4f565b3560035580f35b839034610138578160031936011261013857905490516001600160a01b039091168152602090f35b905034610134578260031936011261013457600154916001600160a01b0391338385160361058e5750506001600160a01b031991821660015582543392811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60249250519063118cdaa760e01b82523390820152fd5b833461060a578060031936011261060a576105be610a4f565b600180546001600160a01b03199081169091558154908116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b8390346101385781600319360112610138576020906006549051908152f35b83903461013857816003193601126101385760025490516001600160a01b039091168152602090f35b90503461013457366003190112610138576024359067ffffffffffffffff821680920361013457610684610a4f565b3560065567ffffffffffffffff19600554161760055580f35b849184346107cd576003199260803685011261047d578260231936011261047d5767ffffffffffffffff91818401838111838210176107ba5784526024358252602095604435878401526064359584871161013857606090873603011261060a5784519360608501858110828211176107a757865286830135908111610138578601903660238301121561060a578282013561073881610809565b92610745885194856107d1565b81845260248a85019260051b8201019236841161060a57509060248a9201905b838210610798575050505061078f9495604491855260248101358886015201358584015235610854565b90519015158152f35b81358152908201908201610765565b634e487b7160e01b835260418452602483fd5b634e487b7160e01b875260418252602487fd5b8380fd5b90601f8019910116810190811067ffffffffffffffff8211176107f357604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116107f35760051b60200190565b9181601f8401121561084f5782359167ffffffffffffffff831161084f576020838186019501011161084f57565b600080fd5b801580156108b7575b6108af576000526007602052604060002054916020604051928051828501520151604083015260408252606082019282841067ffffffffffffffff8511176107f3576108ab93604052610933565b5090565b505050600090565b5060045481101561085d565b9081519160005b8381106108db575050016000815290565b80602080928401015181850152016108ca565b60001981146108fd5760010190565b634e487b7160e01b600052601160045260246000fd5b6006111561091d57565b634e487b7160e01b600052602160045260246000fd5b60408201805193949360018111610a2c5750825151610a1f575b6020830190815181511115610a115760206109809661099a60405161098e8160009b8c95868884015260218301906108c3565b03601f1981018352826107d1565b604051918280926108c3565b039060025afa15610a065785519351918251156109ef57906109c193949151905190610b8e565b60068110156109db57806109d55750149190565b92915050565b634e487b7160e01b85526021600452602485fd5b5051600114159050610a0057149190565b50508190565b6040513d87823e3d90fd5b505050509050600090600290565b5050509050600090600190565b610a3d845151916020860151610ab5565b1461094d575050509050600090600190565b6000546001600160a01b03163303610a6357565b60405163118cdaa760e01b8152336004820152602490fd5b906101009182039182116108fd57565b6000198101919082116108fd57565b919082039182116108fd57565b60010190816001116108fd57565b90600190818111156108af5760005b8183821b10610b43576101009081039081116108fd57610ae390610a7b565b9282610aee85610a8b565b1b90610af982610a8b565b8111610b06575050505090565b9293509091838203610b185750505090565b610b37935090610b2b81610b3193610a9a565b92610a9a565b90610ab5565b610b4090610aa7565b90565b82810180911115610ac457634e487b7160e01b600052601160045260246000fd5b8051821015610b785760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9392938115610c755760018214610c6057845115610c555782610bb083610c80565b610bc3610bbd8851610a8b565b88610ccb565b92818110610c205781610b2b610be39693610bdd93610a9a565b90610b8e565b9091610bee82610913565b81610c19575050610c0d83610c07610c13949551610a8b565b90610b64565b51610d8f565b90600090565b9350919050565b610c2a9450610b8e565b9091610c3582610913565b81610c19575050610c4e83610c07610c13949551610a8b565b5190610d8f565b505090915090600590565b5050909151610c6f5790600090565b90600490565b505090915090600390565b600180821061084f578180916000925b610cb657505060001981019081116108fd576001901b908114610cb05790565b60011c90565b9091610cc1906108ee565b91811c9081610c90565b919082518111610d3257610cde81610809565b90610cec60405192836107d1565b808252601f19610cfb82610809565b0136602084013760005b818110610d13575090925050565b80610d2060019287610b64565b51610d2b8286610b64565b5201610d05565b60405162461bcd60e51b815260206004820152602f60248201527f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260448201526e65206f7574206f6620626f756e647360881b6064820152608490fd5b9060405191600160f81b60208401526021830152604182015260418152608081019080821067ffffffffffffffff8311176107f35781600091602093604052607f1990610ddc83826108c3565b03019060025afa15610dee5760005190565b6040513d6000823e3d90fdfea26469706673582212200ded9be8088e790f32598b31fcce9e7daef0e1d0aacaa422283091789e469f3c64736f6c63430008170033",
    "sourceMap": "1137:5422:27:-:0;;;;-1:-1:-1;;;;;1137:5422:27;;;;;;;;;-1:-1:-1;;1137:5422:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1137:5422:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1273:26:15;;1269:95;;1137:5422:27;;;;;;;;;;;;;-1:-1:-1;1137:5422:27;780:75:28;;;;;;-1:-1:-1;780:75:28;1137:5422:27;;;;3052:40:15;-1:-1:-1;3052:40:15;;788:66:28;1137:5422:27;780:75:28;3688:20:27;780:75:28;;;3688:20:27;780:75:28;3718:30:27;780:75:28;1137:5422:27;;;;;780:75:28;3758:29:27;780:75:28;;;3758:29:27;780:75:28;1137:5422:27;3940:14;780:75:28;1137:5422:27;;;;;;;1269:95:15;1137:5422:27;;-1:-1:-1;;;1322:31:15;;-1:-1:-1;1322:31:15;;;1137:5422:27;;;1322:31:15;1137:5422:27;-1:-1:-1;1137:5422:27;;;;;;-1:-1:-1;1137:5422:27;;;;;-1:-1:-1;1137:5422:27"
  },
  "deployedBytecode": {
    "linkReferences": {},
    "object": "0x60806040908082526004908136101561001757600080fd5b600092833560e01c9182631f3302a91461069d5750816323a4608b146106555781632b7ac3f31461062c5781636c4f6ba91461060d578163715018a6146105a557816379ba5097146105235781638da5cb5b146104fb578163a7e47629146104d9578163c532514b14610215578163ce0bb7e4146101f6578163e30c3978146101cd578163e405bbc3146101a4578163e6679c261461015b578163ef3f7dd51461013c575063f2fde38b146100cb57600080fd5b3461013857602036600319011261013857356001600160a01b0381811691829003610134576100f8610a4f565b600180546001600160a01b031916831790558254167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b8280fd5b5080fd5b8390346101385781600319360112610138576020906003549051908152f35b50503461013857602036600319011261013857356001600160a01b0381169081900361013857610189610a4f565b6bffffffffffffffffffffffff60a01b600254161760025580f35b83903461013857816003193601126101385760209067ffffffffffffffff600554169051908152f35b83903461013857816003193601126101385760015490516001600160a01b039091168152602090f35b9190503461013457826003193601126101345760209250549051908152f35b90503461013457806003193601126101345767ffffffffffffffff90823582811161047d576102479036908501610821565b602493919335908282116104d5576080610265869336908901610821565b969092810103126104d55783519060808201828110858211176104c25785528235825260209384840135818116978882036104be57868501918252878501938887013585526060808701970135875260055495848716809b11156104ae5780516006540361049e578951905189820152848451168a82015285516060820152875160808201526080815260a08101908082108683111761048b57908d9291818c528a8460018060a01b03600254169360035493609f199061032683826108c3565b03019060025afa1561048157835190823b1561047d578e866060938f9360849451998a988997889663ab750e7560e01b885287015281606487015286860137838301850189905260248401526044830152601f01601f191681010301915afa80156104735761042d575b50927f292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d92879260079796958b54809b83835116907f34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb8b8b51948a51908152a45116908167ffffffffffffffff198416176005555190816006558b8451931617825285820152a1519386525283205561042881546108ee565b905580f35b82819b929b11610460578752987f292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d610390565b634e487b7160e01b825260418a52602482fd5b88513d8d823e3d90fd5b8480fd5b8b513d85823e3d90fd5b634e487b7160e01b8e5260418d5260248efd5b89516352c6046360e01b81528c90fd5b895163145ce5ff60e11b81528c90fd5b8a80fd5b634e487b7160e01b895260418852602489fd5b8680fd5b505034610138576020366003190112610138576104f4610a4f565b3560035580f35b839034610138578160031936011261013857905490516001600160a01b039091168152602090f35b905034610134578260031936011261013457600154916001600160a01b0391338385160361058e5750506001600160a01b031991821660015582543392811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60249250519063118cdaa760e01b82523390820152fd5b833461060a578060031936011261060a576105be610a4f565b600180546001600160a01b03199081169091558154908116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b8390346101385781600319360112610138576020906006549051908152f35b83903461013857816003193601126101385760025490516001600160a01b039091168152602090f35b90503461013457366003190112610138576024359067ffffffffffffffff821680920361013457610684610a4f565b3560065567ffffffffffffffff19600554161760055580f35b849184346107cd576003199260803685011261047d578260231936011261047d5767ffffffffffffffff91818401838111838210176107ba5784526024358252602095604435878401526064359584871161013857606090873603011261060a5784519360608501858110828211176107a757865286830135908111610138578601903660238301121561060a578282013561073881610809565b92610745885194856107d1565b81845260248a85019260051b8201019236841161060a57509060248a9201905b838210610798575050505061078f9495604491855260248101358886015201358584015235610854565b90519015158152f35b81358152908201908201610765565b634e487b7160e01b835260418452602483fd5b634e487b7160e01b875260418252602487fd5b8380fd5b90601f8019910116810190811067ffffffffffffffff8211176107f357604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116107f35760051b60200190565b9181601f8401121561084f5782359167ffffffffffffffff831161084f576020838186019501011161084f57565b600080fd5b801580156108b7575b6108af576000526007602052604060002054916020604051928051828501520151604083015260408252606082019282841067ffffffffffffffff8511176107f3576108ab93604052610933565b5090565b505050600090565b5060045481101561085d565b9081519160005b8381106108db575050016000815290565b80602080928401015181850152016108ca565b60001981146108fd5760010190565b634e487b7160e01b600052601160045260246000fd5b6006111561091d57565b634e487b7160e01b600052602160045260246000fd5b60408201805193949360018111610a2c5750825151610a1f575b6020830190815181511115610a115760206109809661099a60405161098e8160009b8c95868884015260218301906108c3565b03601f1981018352826107d1565b604051918280926108c3565b039060025afa15610a065785519351918251156109ef57906109c193949151905190610b8e565b60068110156109db57806109d55750149190565b92915050565b634e487b7160e01b85526021600452602485fd5b5051600114159050610a0057149190565b50508190565b6040513d87823e3d90fd5b505050509050600090600290565b5050509050600090600190565b610a3d845151916020860151610ab5565b1461094d575050509050600090600190565b6000546001600160a01b03163303610a6357565b60405163118cdaa760e01b8152336004820152602490fd5b906101009182039182116108fd57565b6000198101919082116108fd57565b919082039182116108fd57565b60010190816001116108fd57565b90600190818111156108af5760005b8183821b10610b43576101009081039081116108fd57610ae390610a7b565b9282610aee85610a8b565b1b90610af982610a8b565b8111610b06575050505090565b9293509091838203610b185750505090565b610b37935090610b2b81610b3193610a9a565b92610a9a565b90610ab5565b610b4090610aa7565b90565b82810180911115610ac457634e487b7160e01b600052601160045260246000fd5b8051821015610b785760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9392938115610c755760018214610c6057845115610c555782610bb083610c80565b610bc3610bbd8851610a8b565b88610ccb565b92818110610c205781610b2b610be39693610bdd93610a9a565b90610b8e565b9091610bee82610913565b81610c19575050610c0d83610c07610c13949551610a8b565b90610b64565b51610d8f565b90600090565b9350919050565b610c2a9450610b8e565b9091610c3582610913565b81610c19575050610c4e83610c07610c13949551610a8b565b5190610d8f565b505090915090600590565b5050909151610c6f5790600090565b90600490565b505090915090600390565b600180821061084f578180916000925b610cb657505060001981019081116108fd576001901b908114610cb05790565b60011c90565b9091610cc1906108ee565b91811c9081610c90565b919082518111610d3257610cde81610809565b90610cec60405192836107d1565b808252601f19610cfb82610809565b0136602084013760005b818110610d13575090925050565b80610d2060019287610b64565b51610d2b8286610b64565b5201610d05565b60405162461bcd60e51b815260206004820152602f60248201527f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260448201526e65206f7574206f6620626f756e647360881b6064820152608490fd5b9060405191600160f81b60208401526021830152604182015260418152608081019080821067ffffffffffffffff8311176107f35781600091602093604052607f1990610ddc83826108c3565b03019060025afa15610dee5760005190565b6040513d6000823e3d90fdfea26469706673582212200ded9be8088e790f32598b31fcce9e7daef0e1d0aacaa422283091789e469f3c64736f6c63430008170033",
    "sourceMap": "1137:5422:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1137:5422:27;;;;;-1:-1:-1;;;;;1137:5422:27;;;;;;;;;1500:62:15;;:::i;:::-;1613:24:16;1137:5422:27;;-1:-1:-1;;;;;;1137:5422:27;;;;;;;;1652:43:16;1137:5422:27;;1652:43:16;1137:5422:27;;;;;;;;;;;;;;;;;;;;;;;;;;2686:54;1137:5422;;;;;;;;;;;;;;;-1:-1:-1;;1137:5422:27;;;;;-1:-1:-1;;;;;1137:5422:27;;;;;;;;1500:62:15;;:::i;:::-;1137:5422:27;;;4611:20;1137:5422;;;4611:20;1137:5422;;;;;;;;;;;;;;;;;;;;3054:26;1137:5422;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1137:5422:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4837:43;;;;;1137:5422;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4915:12;1137:5422;;;;;4895:32;;;;4891:91;;1137:5422;;5023:15;1137:5422;4995:43;4991:107;;1137:5422;;;;5130:18;;;1137:5422;;;;;;;;;;;;;;;;;;;;;;5130:18;;1137:5422;;;;;;;;;;;;;;;;;;;;;;;;;;;5158:8;1137:5422;;;5181:7;1137:5422;5190:15;;;1137:5422;;;;;:::i;:::-;5190:15;;;5158:8;5190:15;;;;;;;5158:48;;;;;;1137:5422;;;;;;;;;;;;;;;;;;;5158:48;;;;1137:5422;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1137:5422:27;;;5158:48;;;;;;;;;;;1137:5422;;;5450:41;1137:5422;;;5639:11;1137:5422;;;;;;;;;;;;5222:83;1137:5422;;;;;;;;;5222:83;1137:5422;;;;;;;;;4915:12;1137:5422;;;;5023:15;1137:5422;;;;;;;;;;;;;5450:41;1137:5422;;;;;;;;5692:12;1137:5422;;5692:12;:::i;:::-;1137:5422;;;;5158:48;1137:5422;;;;;;;;;;;5450:41;5158:48;;1137:5422;-1:-1:-1;;;1137:5422:27;;;;;;;;5158:48;1137:5422;;;;;;;;;5158:48;1137:5422;;;5190:15;1137:5422;;;;;;;;;;-1:-1:-1;;;1137:5422:27;;;;;;;;4991:107;1137:5422;;-1:-1:-1;;;5061:26:27;;1137:5422;;5061:26;4891:91;1137:5422;;-1:-1:-1;;;4950:21:27;;1137:5422;;4950:21;1137:5422;;;;;-1:-1:-1;;;1137:5422:27;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1137:5422:27;;;;1500:62:15;;:::i;:::-;1137:5422:27;4414:18;1137:5422;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1137:5422:27;;;;;;;;;;;;;;;;;;;;;;1311:13:16;1137:5422:27;;-1:-1:-1;;;;;1137:5422:27;735:10:17;1137:5422:27;;;2214:24:16;2210:96;;-1:-1:-1;;;;;;;;1137:5422:27;;;1311:13:16;1137:5422:27;;;735:10:17;1137:5422:27;;;;;;;;3052:40:15;1137:5422:27;;3052:40:15;1137:5422:27;;2210:96:16;1137:5422:27;;;;2261:34:16;;;;;;735:10:17;2261:34:16;;;1137:5422:27;2261:34:16;1137:5422:27;;;;;;;;;;;;;1500:62:15;;:::i;:::-;1968:20:16;1137:5422:27;;-1:-1:-1;;;;;;1137:5422:27;;;;;;;;;;;;;;;-1:-1:-1;;;;;1137:5422:27;3052:40:15;1137:5422:27;;3052:40:15;1137:5422:27;;;;;;;;;;;;;;;;;;;;;3294:30;1137:5422;;;;;;;;;;;;;;;;;;;;;2252:33;1137:5422;;;-1:-1:-1;;;;;1137:5422:27;;;;;;;;;;;;;;;-1:-1:-1;;1137:5422:27;;;;;;;;;;;;;;;1500:62:15;;:::i;:::-;1137:5422:27;4170:30;1137:5422;;;4210:29;1137:5422;;;4210:29;1137:5422;;;;;;;;;;-1:-1:-1;;1137:5422:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1137:5422:27;;;;;;;;;-1:-1:-1;;;1137:5422:27;;;;;;;;;;;;;;;5130:18;;1137:5422;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;6115:442;6296:16;;:45;;;;6115:442;6292:88;;6311:1;1137:5422;6405:11;1137:5422;;;6311:1;1137:5422;;;;;;;;;6501:18;;;1137:5422;;;;;;;;6501:18;;1137:5422;;;;;;;;;;;;;6463:57;1137:5422;;;6463:57;:::i;:::-;6531:19;6115:442;:::o;6292:88::-;6357:12;;;6311:1;6357:12;:::o;6296:45::-;1137:5422;6331:10;1137:5422;6316:25;;;6296:45;;1137:5422;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;1137:5422:27;;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;1137:5422:27;;;:::o;:::-;;;;;;;;;;;;1342:1444:7;1573:15;;;1137:5422:27;;1342:1444:7;;;1592:1;1573:20;;1592:1;;1613:15;;;1137:5422:27;1609:117:7;;1569:326;1941:9;;;1137:5422:27;;;;;-1:-1:-1;1941:28:7;1937:98;;1941:9;340:4:3;1137:5422:27;;1573:15:7;1137:5422:27;959:45:8;-1:-1:-1;;959:45:8;;;;;;;340:4:3;;;;;;:::i;:::-;959:45:8;5130:18:27;;959:45:8;;;;;;:::i;:::-;1573:15:7;1137:5422:27;;;;;;:::i;:::-;952:53:8;;;;;;;;;;2281:15:7;;1137:5422:27;;;2281:27:7;2277:232;;1137:5422:27;2562:68:7;1137:5422:27;;;;;;2562:68:7;;:::i;:::-;1137:5422:27;;;;;;2645:27:7;2641:79;;2738:20;;2730:49;1342:1444;:::o;2641:79::-;2688:21;;-1:-1:-1;;2688:21:7:o;1137:5422:27:-;-1:-1:-1;;;1137:5422:27;;340:4:3;1137:5422:27;;;;;2277:232:7;-1:-1:-1;1137:5422:27;1592:1:7;2328:20;1592:1;;-1:-1:-1;1592:1:7;;2376:14;2368:43;;:::o;2324:175::-;2450:34;;;;:::o;952:53:8:-;1573:15:7;1137:5422:27;;;;;;;;1937:98:7;1985:39;;;;;;-1:-1:-1;1985:39:7;2000:23;1985:39;:::o;1609:117::-;1660:51;;;;;-1:-1:-1;1660:51:7;1592:1;1660:51;:::o;1569:326::-;1772:45;1746:15;;1137:5422:27;1790:9:7;;;;1137:5422:27;1772:45:7;:::i;:::-;1746:71;1569:326;1742:153;1833:51;;;;;-1:-1:-1;1833:51:7;1592:1;1833:51;:::o;1796:162:15:-;1710:6;1137:5422:27;-1:-1:-1;;;;;1137:5422:27;735:10:17;1855:23:15;1851:101;;1796:162::o;1851:101::-;1137:5422:27;;-1:-1:-1;;;1901:40:15;;735:10:17;1901:40:15;;;1137:5422:27;;;1901:40:15;245:3:3;;;;;;;;;;;:::o;:::-;-1:-1:-1;;245:3:3;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;1052:1:5;245:3:3;;;1052:1:5;245:3:3;;;:::o;936:1011:5:-;;1052:1;1039:14;;;;;1035:125;;-1:-1:-1;563:30:5;1137:5422:27;;;;563:30:5;;;245:3:3;;;;;;;;;1281:48:5;;;:::i;:::-;1432:14;;;;;:::i;:::-;1137:5422:27;1544:24:5;;;;:::i;:::-;1537:31;;1544:24;;1580:17;;;;;:::o;1533:412::-;1711:25;;-1:-1:-1;1711:25:5;;;;;1052:1;;1748:8;;;;:::o;1707:238::-;1859:79;1877:26;;;;;1905:32;1877:26;;:::i;:::-;1905:32;;:::i;:::-;1859:79;;:::i;:::-;1855:83;;;:::i;:::-;1848:90;:::o;556:72::-;245:3:3;;;;;;;556:72:5;245:3:3;1137:5422:27;;;-1:-1:-1;1137:5422:27;;;;;-1:-1:-1;1137:5422:27;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;2983:1463:7;;;;3171:14;;3167:103;;3296:1;3283:14;;3279:206;;1137:5422:27;;3498:21:7;3494:109;;3630:25;;;;:::i;:::-;3698:41;3718:20;1137:5422:27;;3718:20:7;:::i;:::-;3698:41;;:::i;:::-;3779:13;;;;3775:347;;4195:13;;4179:76;4195:13;;4210:19;4195:13;;:::i;4210:19::-;4179:76;;:::i;:::-;1137:5422:27;;;;;:::i;:::-;4269:27:7;4265:82;;1137:5422:27;;4375:31:7;1137:5422:27;4385:20:7;4364:54;1137:5422:27;;;4385:20:7;:::i;:::-;4375:31;;:::i;:::-;1137:5422:27;4364:54:7;:::i;:::-;4356:83;3184:1;2983:1463;:::o;4265:82::-;4312:24;-1:-1:-1;4312:24:7;;-1:-1:-1;4312:24:7:o;3775:347::-;3858:54;;;;:::i;:::-;1137:5422:27;;;;;:::i;:::-;3930:27:7;3926:90;;1137:5422:27;;4058:31:7;1137:5422:27;4068:20:7;4037:53;1137:5422:27;;;4068:20:7;:::i;4058:31::-;1137:5422:27;4037:53:7;;:::i;3494:109::-;3535:57;;;;;;3553:38;3535:57;:::o;3279:206::-;1137:5422:27;;;;;3313:111:7;;3437:37;3184:1;3437:37;:::o;3313:111::-;3358:51;3376:32;3358:51;:::o;3167:103::-;3201:58;;;;;;3219:39;3201:58;:::o;2318:492:5:-;2680:1;;2675:6;;1137:5422:27;;2706:11:5;2136:17;;-1:-1:-1;2160:56:5;2167:6;;;-1:-1:-1;;;;245:3:3;;;;;;;2680:1:5;1137:5422:27;;2762:6:5;;;2758:36;;2318:492;:::o;2758:36::-;2680:1;1137:5422:27;2318:492:5;:::o;2160:56::-;2185:7;;;;;:::i;:::-;1137:5422:27;;;2160:56:5;;;;4913:544:7;;;1137:5422:27;;5167:19:7;;5138:132;;1137:5422:27;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1137:5422:27;;;:::i;:::-;;;;;;;3184:1:7;5365:8;;;;;;-1:-1:-1;5440:10:7;;-1:-1:-1;;4913:544:7:o;5375:3::-;5412:8;;5142:44;5412:8;;;:::i;:::-;1137:5422:27;5394:26:7;;;;:::i;:::-;1137:5422:27;;5345:18:7;;5138:132;1137:5422:27;;-1:-1:-1;;;5202:57:7;;1137:5422:27;5202:57:7;;;1137:5422:27;;;;;;;;;;;-1:-1:-1;;;1137:5422:27;;;;;;5202:57:7;415:157:8;;1137:5422:27;;;;;;516:52:8;;;340:4:3;389;;;1137:5422:27;389:4:3;;;1137:5422:27;389:4:3;516:52:8;;1137:5422:27;;;;;;;;;;;;;;-1:-1:-1;1137:5422:27;516:52:8;1137:5422:27;;;509:60:8;;1137:5422:27;;;;;:::i;:::-;509:60:8;;;;;;;;;-1:-1:-1;509:60:8;415:157;:::o;509:60::-;1137:5422:27;;;-1:-1:-1;1137:5422:27;;;;"
  },
  "id": 27,
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_admin",
              "type": "address"
            },
            {
              "internalType": "contract IRiscZeroVerifier",
              "name": "_verifier",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "_trustedHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "_trustedHeight",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "InvalidTargetHeight",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidTrustedHeaderHash",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "OwnableInvalidOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "OwnableUnauthorizedAccount",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "proofNonce",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "startBlock",
              "type": "uint64"
            },
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "endBlock",
              "type": "uint64"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "dataCommitment",
              "type": "bytes32"
            }
          ],
          "name": "DataCommitmentStored",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "blockNumber",
              "type": "uint64"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "headerHash",
              "type": "bytes32"
            }
          ],
          "name": "HeadUpdate",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferStarted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "acceptOwnership",
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_imageId",
              "type": "bytes32"
            }
          ],
          "name": "adminSetImageId",
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_trustedHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "_trustedHeight",
              "type": "uint64"
            }
          ],
          "name": "adminSetTrustedState",
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IRiscZeroVerifier",
              "name": "_verifier",
              "type": "address"
            }
          ],
          "name": "adminSetVerifier",
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "imageId",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "latestBlockHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "latestHeight",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pendingOwner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "proofNonce",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_commitBytes",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_seal",
              "type": "bytes"
            }
          ],
          "name": "updateRange",
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "verifier",
          "outputs": [
            {
              "internalType": "contract IRiscZeroVerifier",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_proofNonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "height",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "dataRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct DataRootTuple",
              "name": "_tuple",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "sideNodes",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "key",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numLeaves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BinaryMerkleProof",
              "name": "_proof",
              "type": "tuple"
            }
          ],
          "name": "verifyAttestation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "acceptOwnership()": {
            "details": "The new owner accepts the ownership transfer."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "pendingOwner()": {
            "details": "Returns the address of the pending owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
          },
          "verifyAttestation(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))": {
            "params": {
              "_proof": "Binary Merkle tree proof that `tuple` is in the root at `_tupleRootNonce`.",
              "_proofNonce": "Nonce of the tuple root to prove against.",
              "_tuple": "Data root tuple to prove inclusion of."
            },
            "returns": {
              "_0": "`true` is proof is valid, `false` otherwise."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "adminSetImageId(bytes32)": {
            "notice": "Only the admin can update. Updates the image ID to verify proofs against."
          },
          "adminSetTrustedState(bytes32,uint64)": {
            "notice": "Only the admin can update. Updates the trusted height and block hash to sync from."
          },
          "adminSetVerifier(address)": {
            "notice": "Only the admin can update. Updates the verifier contract address."
          },
          "constructor": {
            "notice": "Initialize the contract, binding it to a specified RISC Zero verifier."
          },
          "imageId()": {
            "notice": "Image ID of the only zkVM binary to accept verification from.         The image ID is similar to the address of a smart contract.         It uniquely represents the logic of that guest program,         ensuring that only proofs generated from a pre-defined guest program         (in this case, checking if a number is even) are considered valid."
          },
          "latestBlockHash()": {
            "notice": "The latest block hash validated."
          },
          "latestHeight()": {
            "notice": "The latest height validated."
          },
          "proofNonce()": {
            "notice": "nonce for mapping block ranges to block merkle roots. This value is used as the key         to insert new roots in `merkleRoots`."
          },
          "updateRange(bytes,bytes)": {
            "notice": "Validate a proof of a new header range, update state."
          },
          "verifier()": {
            "notice": "RISC Zero verifier contract address."
          },
          "verifyAttestation(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))": {
            "notice": "Verify a Data Availability attestation. Method of IDAOracle from Blobstream contract."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "compilationTarget": {
        "src/Blobstream0.sol": "Blobstream0"
      },
      "evmVersion": "paris",
      "libraries": {},
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "remappings": [
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "blobstream-contracts/=lib/blobstream-contracts/src/",
        "blobstream/=lib/blobstream-contracts/src/",
        "ds-test/=lib/blobstream-contracts/lib/ds-test/src/",
        "erc4626-tests/=lib/blobstream-contracts/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/blobstream-contracts/lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/",
        "risc0-ethereum/=lib/risc0-ethereum/",
        "risc0/=lib/risc0-ethereum/contracts/src/",
        "tree/=lib/blobstream-contracts/src/lib/tree/",
        "verifier/=lib/blobstream-contracts/src/lib/verifier/"
      ],
      "viaIR": true
    },
    "sources": {
      "lib/blobstream-contracts/src/DataRootTuple.sol": {
        "keccak256": "0x0526597d14a6d7f258ec48e434a9b60c9a8781764a8f23c878d49926daeb5d1c",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://06ee253f8d0f58dbe66c64cb5d2945182ba3bced088167472d8f953cec421916",
          "dweb:/ipfs/QmUF9jjr6bH3pPgjGAZqYhsUn7EevqU7kZn8RBqQ4EoU2w"
        ]
      },
      "lib/blobstream-contracts/src/IDAOracle.sol": {
        "keccak256": "0xc35648b17d3587bc3a627f67a328874db536ee24c11b970c3c57226d69a32eec",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://362610301e6057d10777c84111d4bb43af53af75a488fb8ab8666a775302a3fc",
          "dweb:/ipfs/QmURgSTYhiguV1oCUARaTTWrpFHg5nMEtxhPVcpUDuEKq6"
        ]
      },
      "lib/blobstream-contracts/src/lib/tree/Constants.sol": {
        "keccak256": "0x2050b2be8a739ce250cc5cea1556936c7937915b5d7fde269dd70e8e7eb660c4",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://946ea30d1001048a800f60bb24d2ab7ecf5f92ae2abd212f3f855e37a6840ce7",
          "dweb:/ipfs/QmW2PnhAB5h2eCCM6Vafg8ZUpBttjLTbBhtXjJh3SSrYEN"
        ]
      },
      "lib/blobstream-contracts/src/lib/tree/Types.sol": {
        "keccak256": "0xa47e9e20fef88264acdf1fc6bc0b3bb9f23c7022f5de8d203a1014895a606958",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://d480249b6adf8730bffcf26eed5902eb9fd1d56d11f931b35a9e19c6415b3f47",
          "dweb:/ipfs/QmPCrcMmQdNMYG232WxEg2zZRFvXQqdEZgwQNMaDJ2oNab"
        ]
      },
      "lib/blobstream-contracts/src/lib/tree/Utils.sol": {
        "keccak256": "0x9760cb3ab3d4f412949b9be1bbdf5d9e7954cad44a94a4f7fe90fcffb86fe7fa",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://06edf92a63d5b2c3459800acc6945071ee069be6df03b70f28440c5c732465aa",
          "dweb:/ipfs/QmU4LnS5ckxXpEBE82y5gfsNxn5gUQPh273nLrmfPP9pjD"
        ]
      },
      "lib/blobstream-contracts/src/lib/tree/binary/BinaryMerkleProof.sol": {
        "keccak256": "0x9fb953284b455b544091f058fdb11ac73928093517333909c0744d9319410688",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://938230a60210345fe7cc661708c4fe0db663a5f5b5306f05fe4023b44f104b6e",
          "dweb:/ipfs/QmUvcJuDmwnbRzXX5qgV4Mckg6ujvMeo46SrTPvgpPhFSF"
        ]
      },
      "lib/blobstream-contracts/src/lib/tree/binary/BinaryMerkleTree.sol": {
        "keccak256": "0x90dc9ac613014c2d3fcebbd23f2b5af67188b7de80b2ef853f20c91a14ce68fd",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://4dffcfb8911d174787b05d814c423ea368c6526e32d762576fb5109e517a185f",
          "dweb:/ipfs/QmRxYnjwkEANhqXkoNifG2kbGtEymyLRU5h2NyPTZ5wbSE"
        ]
      },
      "lib/blobstream-contracts/src/lib/tree/binary/TreeHasher.sol": {
        "keccak256": "0x2f16501eac14f6e2a61de29d3aa10e3aaf8e0a594fc9cf8dc2d955bb2f6d54e0",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://984a2e5d52cfdd38f2c597bddc4a2de8ad1e4dd9c81008376569a29c74fa963e",
          "dweb:/ipfs/QmaXhfHD58Jv4nSw3qw2hGwbDSPKDjFzPNYWm9Y4KWiigm"
        ]
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
        "license": "MIT",
        "urls": [
          "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
          "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
        ]
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {
        "keccak256": "0x08b074ae1b12e70ce24d1335086ec5a418934311a6771d9f61fe24d392050e12",
        "license": "MIT",
        "urls": [
          "bzz-raw://e2fd900a8f8244fc0a49bae1ca1bd5815884f248a2306b8e7dc68011c25803b7",
          "dweb:/ipfs/Qmd4EaujSR74x7EqziRDfqgc6Tv2nzRQDSaxKXcU1ybxbA"
        ]
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
        "license": "MIT",
        "urls": [
          "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
          "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
        ]
      },
      "lib/risc0-ethereum/contracts/src/IRiscZeroVerifier.sol": {
        "keccak256": "0x19341f62c8fe3c0945ebffa4f25d49706ded741af98eaacb7ade824c947f61a4",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://5d443c7187fd565e25acdfd3df63f14421d06dda0839470cb475546f7c9908c0",
          "dweb:/ipfs/QmeaHPjKmGZBC15iiYKsDCY1k2UY3iYZiNB6Pdc8ow6aVX"
        ]
      },
      "lib/risc0-ethereum/contracts/src/Util.sol": {
        "keccak256": "0x230a9a58bb2b0c68d4921ecc3672783f941890a2fa3a238dbe5188cfb7658b82",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://586cb5296c564761609ca8aaae5b1fbbdb19ab1e174f7197f602572d9e82b70c",
          "dweb:/ipfs/QmWxDmucSfg3Wgdk1rVcheDHwkziTsXWvKpKSCnxtpQBqg"
        ]
      },
      "src/Blobstream0.sol": {
        "keccak256": "0xcf8032bc779d67436e88a82cda9ac6d631d515861e842810533ded99b584af34",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://63ff2cef650f9af0db8b99b3b9953669b9486a7a07529c09cc72c1b2163258e4",
          "dweb:/ipfs/QmY5ZdTEp1kGfeLmrvTpdbDJEjRa2kqFbweHRYS8q4aLSo"
        ]
      },
      "src/ImageID.sol": {
        "keccak256": "0x885d57e9b6198a51de3b77f4a283a361e329493afa7a77a159d59f0e784ae4f9",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://f4c5fd3272d46cc63a5ed96553638392d94f6811ce8488f3112b248f67839211",
          "dweb:/ipfs/QmYDVdNF1PdJRnM8BrHu3UpCiteiXCVq9wiQ7dT8u48rEg"
        ]
      },
      "src/RangeCommitment.sol": {
        "keccak256": "0x5e348841d50935293df2072b720b55b4efa76bb66afd34d64c7c77c1d8a209d8",
        "license": "Apache-2.0",
        "urls": [
          "bzz-raw://4ef3085d6c2cf5badf284827eaa3cdc469663fe32f6f3356a4381f14923b36df",
          "dweb:/ipfs/QmcPw35WFcVvDJPDhgd67R3mhtRe6GJUGTJ5dwBz5fVBHf"
        ]
      }
    },
    "version": 1
  },
  "methodIdentifiers": {
    "acceptOwnership()": "79ba5097",
    "adminSetImageId(bytes32)": "a7e47629",
    "adminSetTrustedState(bytes32,uint64)": "23a4608b",
    "adminSetVerifier(address)": "e6679c26",
    "imageId()": "ef3f7dd5",
    "latestBlockHash()": "6c4f6ba9",
    "latestHeight()": "e405bbc3",
    "owner()": "8da5cb5b",
    "pendingOwner()": "e30c3978",
    "proofNonce()": "ce0bb7e4",
    "renounceOwnership()": "715018a6",
    "transferOwnership(address)": "f2fde38b",
    "updateRange(bytes,bytes)": "c532514b",
    "verifier()": "2b7ac3f3",
    "verifyAttestation(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))": "1f3302a9"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"contract IRiscZeroVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_trustedHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_trustedHeight\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidTargetHeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTrustedHeaderHash\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"endBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataCommitment\",\"type\":\"bytes32\"}],\"name\":\"DataCommitmentStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"}],\"name\":\"HeadUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_imageId\",\"type\":\"bytes32\"}],\"name\":\"adminSetImageId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_trustedHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_trustedHeight\",\"type\":\"uint64\"}],\"name\":\"adminSetTrustedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRiscZeroVerifier\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"adminSetVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestHeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_commitBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_seal\",\"type\":\"bytes\"}],\"name\":\"updateRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IRiscZeroVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proofNonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct DataRootTuple\",\"name\":\"_tuple\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryMerkleProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"DataCommitmentStored(uint256,uint64,uint64,bytes32)\":{\"params\":{\"dataCommitment\":\"The data commitment for the block range.\",\"endBlock\":\"The end block of the block range.\",\"proofNonce\":\"The nonce of the proof.\",\"startBlock\":\"The start block of the block range.\"}}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"verifyAttestation(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))\":{\"params\":{\"_proof\":\"Binary Merkle tree proof that `tuple` is in the root at `_tupleRootNonce`.\",\"_proofNonce\":\"Nonce of the tuple root to prove against.\",\"_tuple\":\"Data root tuple to prove inclusion of.\"},\"returns\":{\"_0\":\"`true` is proof is valid, `false` otherwise.\"}}},\"stateVariables\":{\"latestBlockHash\":{\"details\":\"always update this in tandem with `latestHeight`\"},\"latestHeight\":{\"details\":\"this value is 64 bits as is the max for heights in Tendermint.\"}},\"title\":\"A starter application using RISC Zero.\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidTargetHeight()\":[{\"notice\":\"Target height for next batch was below the current height.\"}],\"InvalidTrustedHeaderHash()\":[{\"notice\":\"Trusted block hash does not equal the commitment from the new batch.\"}]},\"events\":{\"DataCommitmentStored(uint256,uint64,uint64,bytes32)\":{\"notice\":\"Data commitment stored for the block range [startBlock, endBlock) with proof nonce. NOTE: This event matches existing Blobstream contracts, for ease of integration.\"},\"HeadUpdate(uint64,bytes32)\":{\"notice\":\"Emits event with the new head update. NOTE: Matches existing Blobstream contract, for ease of integration.\"}},\"kind\":\"user\",\"methods\":{\"adminSetImageId(bytes32)\":{\"notice\":\"Only the admin can update. Updates the image ID to verify proofs against.\"},\"adminSetTrustedState(bytes32,uint64)\":{\"notice\":\"Only the admin can update. Updates the trusted height and block hash to sync from.\"},\"adminSetVerifier(address)\":{\"notice\":\"Only the admin can update. Updates the verifier contract address.\"},\"constructor\":{\"notice\":\"Initialize the contract, binding it to a specified RISC Zero verifier.\"},\"imageId()\":{\"notice\":\"Image ID of the only zkVM binary to accept verification from.         The image ID is similar to the address of a smart contract.         It uniquely represents the logic of that guest program,         ensuring that only proofs generated from a pre-defined guest program         (in this case, checking if a number is even) are considered valid.\"},\"latestBlockHash()\":{\"notice\":\"The latest block hash validated.\"},\"latestHeight()\":{\"notice\":\"The latest height validated.\"},\"proofNonce()\":{\"notice\":\"nonce for mapping block ranges to block merkle roots. This value is used as the key         to insert new roots in `merkleRoots`.\"},\"updateRange(bytes,bytes)\":{\"notice\":\"Validate a proof of a new header range, update state.\"},\"verifier()\":{\"notice\":\"RISC Zero verifier contract address.\"},\"verifyAttestation(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))\":{\"notice\":\"Verify a Data Availability attestation. Method of IDAOracle from Blobstream contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Blobstream0.sol\":\"Blobstream0\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":blobstream-contracts/=lib/blobstream-contracts/src/\",\":blobstream/=lib/blobstream-contracts/src/\",\":ds-test/=lib/blobstream-contracts/lib/ds-test/src/\",\":erc4626-tests/=lib/blobstream-contracts/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/blobstream-contracts/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/\",\":risc0-ethereum/=lib/risc0-ethereum/\",\":risc0/=lib/risc0-ethereum/contracts/src/\",\":tree/=lib/blobstream-contracts/src/lib/tree/\",\":verifier/=lib/blobstream-contracts/src/lib/verifier/\"],\"viaIR\":true},\"sources\":{\"lib/blobstream-contracts/src/DataRootTuple.sol\":{\"keccak256\":\"0x0526597d14a6d7f258ec48e434a9b60c9a8781764a8f23c878d49926daeb5d1c\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://06ee253f8d0f58dbe66c64cb5d2945182ba3bced088167472d8f953cec421916\",\"dweb:/ipfs/QmUF9jjr6bH3pPgjGAZqYhsUn7EevqU7kZn8RBqQ4EoU2w\"]},\"lib/blobstream-contracts/src/IDAOracle.sol\":{\"keccak256\":\"0xc35648b17d3587bc3a627f67a328874db536ee24c11b970c3c57226d69a32eec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://362610301e6057d10777c84111d4bb43af53af75a488fb8ab8666a775302a3fc\",\"dweb:/ipfs/QmURgSTYhiguV1oCUARaTTWrpFHg5nMEtxhPVcpUDuEKq6\"]},\"lib/blobstream-contracts/src/lib/tree/Constants.sol\":{\"keccak256\":\"0x2050b2be8a739ce250cc5cea1556936c7937915b5d7fde269dd70e8e7eb660c4\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://946ea30d1001048a800f60bb24d2ab7ecf5f92ae2abd212f3f855e37a6840ce7\",\"dweb:/ipfs/QmW2PnhAB5h2eCCM6Vafg8ZUpBttjLTbBhtXjJh3SSrYEN\"]},\"lib/blobstream-contracts/src/lib/tree/Types.sol\":{\"keccak256\":\"0xa47e9e20fef88264acdf1fc6bc0b3bb9f23c7022f5de8d203a1014895a606958\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://d480249b6adf8730bffcf26eed5902eb9fd1d56d11f931b35a9e19c6415b3f47\",\"dweb:/ipfs/QmPCrcMmQdNMYG232WxEg2zZRFvXQqdEZgwQNMaDJ2oNab\"]},\"lib/blobstream-contracts/src/lib/tree/Utils.sol\":{\"keccak256\":\"0x9760cb3ab3d4f412949b9be1bbdf5d9e7954cad44a94a4f7fe90fcffb86fe7fa\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://06edf92a63d5b2c3459800acc6945071ee069be6df03b70f28440c5c732465aa\",\"dweb:/ipfs/QmU4LnS5ckxXpEBE82y5gfsNxn5gUQPh273nLrmfPP9pjD\"]},\"lib/blobstream-contracts/src/lib/tree/binary/BinaryMerkleProof.sol\":{\"keccak256\":\"0x9fb953284b455b544091f058fdb11ac73928093517333909c0744d9319410688\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://938230a60210345fe7cc661708c4fe0db663a5f5b5306f05fe4023b44f104b6e\",\"dweb:/ipfs/QmUvcJuDmwnbRzXX5qgV4Mckg6ujvMeo46SrTPvgpPhFSF\"]},\"lib/blobstream-contracts/src/lib/tree/binary/BinaryMerkleTree.sol\":{\"keccak256\":\"0x90dc9ac613014c2d3fcebbd23f2b5af67188b7de80b2ef853f20c91a14ce68fd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4dffcfb8911d174787b05d814c423ea368c6526e32d762576fb5109e517a185f\",\"dweb:/ipfs/QmRxYnjwkEANhqXkoNifG2kbGtEymyLRU5h2NyPTZ5wbSE\"]},\"lib/blobstream-contracts/src/lib/tree/binary/TreeHasher.sol\":{\"keccak256\":\"0x2f16501eac14f6e2a61de29d3aa10e3aaf8e0a594fc9cf8dc2d955bb2f6d54e0\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://984a2e5d52cfdd38f2c597bddc4a2de8ad1e4dd9c81008376569a29c74fa963e\",\"dweb:/ipfs/QmaXhfHD58Jv4nSw3qw2hGwbDSPKDjFzPNYWm9Y4KWiigm\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\":{\"keccak256\":\"0x08b074ae1b12e70ce24d1335086ec5a418934311a6771d9f61fe24d392050e12\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2fd900a8f8244fc0a49bae1ca1bd5815884f248a2306b8e7dc68011c25803b7\",\"dweb:/ipfs/Qmd4EaujSR74x7EqziRDfqgc6Tv2nzRQDSaxKXcU1ybxbA\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/risc0-ethereum/contracts/src/IRiscZeroVerifier.sol\":{\"keccak256\":\"0x19341f62c8fe3c0945ebffa4f25d49706ded741af98eaacb7ade824c947f61a4\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5d443c7187fd565e25acdfd3df63f14421d06dda0839470cb475546f7c9908c0\",\"dweb:/ipfs/QmeaHPjKmGZBC15iiYKsDCY1k2UY3iYZiNB6Pdc8ow6aVX\"]},\"lib/risc0-ethereum/contracts/src/Util.sol\":{\"keccak256\":\"0x230a9a58bb2b0c68d4921ecc3672783f941890a2fa3a238dbe5188cfb7658b82\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://586cb5296c564761609ca8aaae5b1fbbdb19ab1e174f7197f602572d9e82b70c\",\"dweb:/ipfs/QmWxDmucSfg3Wgdk1rVcheDHwkziTsXWvKpKSCnxtpQBqg\"]},\"src/Blobstream0.sol\":{\"keccak256\":\"0xcf8032bc779d67436e88a82cda9ac6d631d515861e842810533ded99b584af34\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://63ff2cef650f9af0db8b99b3b9953669b9486a7a07529c09cc72c1b2163258e4\",\"dweb:/ipfs/QmY5ZdTEp1kGfeLmrvTpdbDJEjRa2kqFbweHRYS8q4aLSo\"]},\"src/ImageID.sol\":{\"keccak256\":\"0x885d57e9b6198a51de3b77f4a283a361e329493afa7a77a159d59f0e784ae4f9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://f4c5fd3272d46cc63a5ed96553638392d94f6811ce8488f3112b248f67839211\",\"dweb:/ipfs/QmYDVdNF1PdJRnM8BrHu3UpCiteiXCVq9wiQ7dT8u48rEg\"]},\"src/RangeCommitment.sol\":{\"keccak256\":\"0x5e348841d50935293df2072b720b55b4efa76bb66afd34d64c7c77c1d8a209d8\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4ef3085d6c2cf5badf284827eaa3cdc469663fe32f6f3356a4381f14923b36df\",\"dweb:/ipfs/QmcPw35WFcVvDJPDhgd67R3mhtRe6GJUGTJ5dwBz5fVBHf\"]}},\"version\":1}"
}